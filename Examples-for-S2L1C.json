[{"name":"True Color","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        13.822174,\n        45.850803,\n        14.55963,\n        46.291917\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S2L1C\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-10-01T00:00:00Z\",\n            \"to\": \"2018-12-31T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/jpeg\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"B02\\\", \\\"B03\\\", \\\"B04\\\"],\\n    output: { \\n      bands: 3,\\n      sampleType: \\\"AUTO\\\" // default value - scales the output values from [0,1] to [0,255].   \\n     }\\n  }\\n}\\nfunction evaluatePixel(sample) {\\n  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02]\\n}\"\n}","mode":"PROCESS"},{"name":"True Color, multi-band GeoTIff","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        408553.572376,\n        5077565.177596,\n        466080.988815,\n        5127156.405773\n      ],\n      \"properties\": {\n        \"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"\n      }\n    },\n    \"data\": [\n      {\n        \"type\": \"S2L1C\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-10-01T00:00:00Z\",\n            \"to\": \"2018-12-31T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/jpeg\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"B02\\\", \\\"B03\\\", \\\"B04\\\"],\\n    output: { bands: 3 }\\n  }\\n}\\nfunction evaluatePixel(sample) {\\n  return [2.5 * sample.B04, 2.5 * sample.B03, 2.5 * sample.B02]\\n}\"\n}","mode":"PROCESS"},{"name":"True Color, preview mode","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        408553.572376,\n        5078145.372761,\n        776365.247134,\n        5354872.679779\n      ],\n      \"properties\": {\n        \"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"\n      }\n    },\n    \"data\": [\n      {\n        \"type\": \"S2L1C\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-10-11T00:00:00Z\",\n            \"to\": \"2018-11-18T00:00:00Z\"\n          },\n          \"previewMode\": \"PREVIEW\"\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/png\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return{\\n    input: [\\\"B02\\\", \\\"B03\\\", \\\"B04\\\"],\\n    output: {bands: 3}\\n  }\\n}\\nfunction evaluatePixel(sample) {\\n  return [ 2.5*sample.B04,  2.5*sample.B03,  2.5*sample.B02 ]\\n}\"\n}","mode":"PROCESS"},{"name":"True Color, mosaicking with leastRecent","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        408553.572376,\n        5077565.177596,\n        466080.988815,\n        5127156.405773\n      ],\n      \"properties\": {\n        \"crs\": \"http://www.opengis.net/def/crs/EPSG/0/32633\"\n      }\n    },\n    \"data\": [\n      {\n        \"type\": \"S2L1C\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-10-11T00:00:00Z\",\n            \"to\": \"2018-11-18T00:00:00Z\"\n          },\n          \"mosaickingOrder\": \"leastRecent\"\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/png\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return{\\n    input: [\\\"B02\\\", \\\"B03\\\", \\\"B04\\\"],\\n    output: {bands: 3}\\n  }\\n}\\nfunction evaluatePixel(sample) {\\n  return [ 2.5*sample.B04,  2.5*sample.B03,  2.5*sample.B02 ]\\n}\"\n}","mode":"PROCESS"},{"name":"True color and metadata (multi-part response GeoTIFF and json)","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        13.822174,\n        45.850803,\n        14.559631,\n        46.291917\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S2L1C\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-12-27T00:00:00Z\",\n            \"to\": \"2018-12-27T23:59:59Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      },\n      {\n        \"identifier\": \"userdata\",\n        \"format\": {\n          \"type\": \"application/json\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"B02\\\", \\\"B03\\\", \\\"B04\\\"],\\n    mosaicking: Mosaicking.ORBIT,\\n    output: { id:\\\"default\\\", bands: 3}\\n  }\\n}\\nfunction updateOutputMetadata(scenes, inputMetadata, outputMetadata) {\\n  outputMetadata.userData = { \\\"metadata\\\":  JSON.stringify(scenes) }\\n}\\nfunction evaluatePixel(samples) {\\n  return [ 2.5*samples[0].B04, 2.5*samples[0].B03, 2.5*samples[0].B02 ]\\n}\"\n}","mode":"PROCESS"},{"name":"True color multi-part-reponse (different formats and SampleType)","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        12.206251,\n        41.627351,\n        12.594042,\n        41.856879\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S2L1C\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-06-01T00:00:00Z\",\n            \"to\": \"2018-08-31T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/jpeg\"\n        }\n      },\n      {\n        \"identifier\": \"true_color_8bit\",\n        \"format\": {\n          \"type\": \"image/png\"\n        }\n      },\n      {\n        \"identifier\": \"true_color_16bit\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      },\n      {\n        \"identifier\": \"true_color_32float\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\n  function setup( ){\\n  return{\\n    input: [{\\n      bands:[\\\"B04\\\", \\\"B03\\\", \\\"B02\\\"],\\n      units: \\\"REFLECTANCE\\\" // default units\\n    }],\\n    output: [{\\n      id: \\\"default\\\",\\n      bands: 3,\\n      sampleType: \\\"AUTO\\\" // default  - scales the output values from input values [0,1] to [0,255].\\n      },\\n    {\\n      id: \\\"true_color_8bit\\\",\\n      bands: 3,\\n      sampleType: \\\"UINT8\\\"},\\n     {\\n      id: \\\"true_color_16bit\\\",\\n      bands: 3,\\n      sampleType: \\\"UINT16\\\"},\\n     {\\n      id: \\\"true_color_32float\\\",\\n      bands: 3,\\n      sampleType: \\\"FLOAT32\\\"}\\n    ]\\n  }\\n}\\nfunction evaluatePixel(sample) {\\n \\n    return {\\n      //  output band values are scaled from [0,1] to [0,255]. Multiply by 2.5 to increase brightness\\n      default: [2.5*sample.B04, 2.5*sample.B03,  2.5*sample.B02],\\n      \\n     // Multiply input reflectance values by 255 to return the band values clamped to [0 , 255] unsigned 8 bit range.  \\n      true_color_8bit: [2.5 *sample.B04  *255,  2.5 * sample.B03 *255,  2.5 *sample.B02 *255],\\n      \\n      // Multiply input reflectance values  by 65535 to return the band values clamped to [0 ,65535] unsigned 16 bit range.  \\n      true_color_16bit: [2.5 * sample.B04 *65535,  2.5 * sample.B03 *65535,  2.5 * sample.B02 *65535], \\n      \\n      // To save processing units multiply by 10000 to return integers . To obtain reflectance values, simply divide the resulting pixel values by 10000.\\n      true_color_32float: [ sample.B04 *10000, sample.B03 *10000, sample.B02 *10000], \\n  }\\n}\"\n}","mode":"PROCESS"},{"name":"NDVI as jpeg image with bounds given as polygon","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -94.047991,\n              41.793072\n            ],\n            [\n              -94.048033,\n              41.805773\n            ],\n            [\n              -94.067388,\n              41.805901\n            ],\n            [\n              -94.067345,\n              41.796719\n            ],\n            [\n              -94.062238,\n              41.79144\n            ],\n            [\n              -94.050479,\n              41.791376\n            ],\n            [\n              -94.050394,\n              41.793072\n            ],\n            [\n              -94.047991,\n              41.793072\n            ]\n          ]\n        ]\n      }\n    },\n    \"data\": [\n      {\n        \"type\": \"S2L1C\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-10-01T00:00:00Z\",\n            \"to\": \"2018-12-20T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 514.206,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/jpeg\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [{\\n      bands:[\\\"B04\\\", \\\"B08\\\"],\\n    }],\\n    output: {\\n      id: \\\"default\\\",\\n      bands: 3,\\n    }\\n  }\\n}\\nfunction evaluatePixel(sample) {\\n    let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04)\\n    \\n    if (ndvi<-0.5) return [0.05,0.05,0.05]\\n    else if (ndvi<-0.2) return [0.75,0.75,0.75]\\n    else if (ndvi<-0.1) return [0.86,0.86,0.86]\\n    else if (ndvi<0) return [0.92,0.92,0.92]\\n    else if (ndvi<0.025) return [1,0.98,0.8]\\n    else if (ndvi<0.05) return [0.93,0.91,0.71]\\n    else if (ndvi<0.075) return [0.87,0.85,0.61]\\n    else if (ndvi<0.1) return [0.8,0.78,0.51]\\n    else if (ndvi<0.125) return [0.74,0.72,0.42]\\n    else if (ndvi<0.15) return [0.69,0.76,0.38]\\n    else if (ndvi<0.175) return [0.64,0.8,0.35]\\n    else if (ndvi<0.2) return [0.57,0.75,0.32]\\n    else if (ndvi<0.25) return [0.5,0.7,0.28]\\n    else if (ndvi<0.3) return [0.44,0.64,0.25]\\n    else if (ndvi<0.35) return [0.38,0.59,0.21]\\n    else if (ndvi<0.4) return [0.31,0.54,0.18]\\n    else if (ndvi<0.45) return [0.25,0.49,0.14]\\n    else if (ndvi<0.5) return [0.19,0.43,0.11]\\n    else if (ndvi<0.55) return [0.13,0.38,0.07]\\n    else if (ndvi<0.6) return [0.06,0.33,0.04]\\n    else return [0,0.27,0]\\n}\"\n}","mode":"PROCESS"},{"name":"Exact NDVI values using a floating point GeoTIFF","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -94.047991,\n              41.793072\n            ],\n            [\n              -94.048033,\n              41.805773\n            ],\n            [\n              -94.067388,\n              41.805901\n            ],\n            [\n              -94.067345,\n              41.796719\n            ],\n            [\n              -94.062238,\n              41.79144\n            ],\n            [\n              -94.050479,\n              41.791376\n            ],\n            [\n              -94.050394,\n              41.793072\n            ],\n            [\n              -94.047991,\n              41.793072\n            ]\n          ]\n        ]\n      }\n    },\n    \"data\": [\n      {\n        \"type\": \"S2L1C\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-10-01T00:00:00Z\",\n            \"to\": \"2018-12-20T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 514.206,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return{\\n    input: [{\\n      bands: [\\\"B04\\\", \\\"B08\\\"],\\n      units: \\\"DN\\\"\\n    }],\\n    output: {\\n      id: \\\"default\\\",\\n      bands: 1,\\n      sampleType: SampleType.FLOAT32\\n    }\\n  }\\n}\\nfunction evaluatePixel(sample) {\\n  let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04)\\n  return [ ndvi ]\\n}\"\n}","mode":"PROCESS"},{"name":"NDVI image and value (multi-part response png and GeoTIFF)","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -94.047991,\n              41.793072\n            ],\n            [\n              -94.048033,\n              41.805773\n            ],\n            [\n              -94.067388,\n              41.805901\n            ],\n            [\n              -94.067345,\n              41.796719\n            ],\n            [\n              -94.062238,\n              41.79144\n            ],\n            [\n              -94.050479,\n              41.791376\n            ],\n            [\n              -94.050394,\n              41.793072\n            ],\n            [\n              -94.047991,\n              41.793072\n            ]\n          ]\n        ]\n      }\n    },\n    \"data\": [\n      {\n        \"type\": \"S2L1C\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-10-01T00:00:00Z\",\n            \"to\": \"2018-12-20T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 514.206,\n    \"responses\": [\n      {\n        \"identifier\": \"ndvi_image\",\n        \"format\": {\n          \"type\": \"image/png\"\n        }\n      },\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup( ){\\n  return{\\n    input: [{\\n      bands:[\\\"B04\\\", \\\"B08\\\"],\\n    }],\\n    output: [{\\n      id: \\\"default\\\",\\n      bands: 1,\\n      sampleType: SampleType.FLOAT32},\\n    {\\n      id: \\\"ndvi_image\\\",\\n      bands: 3,\\n      sampleType: SampleType.AUTO}\\n    ]\\n  }\\n}\\nfunction evaluatePixel(sample) {\\n    let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04)\\n    if (ndvi<-0.5) image = [0.05,0.05,0.05]\\n    else if (ndvi<-0.2) image = [0.75,0.75,0.75]\\n    else if (ndvi<-0.1) image = [0.86,0.86,0.86]\\n    else if (ndvi<0) image = [0.92,0.92,0.92]\\n    else if (ndvi<0.025) image = [1,0.98,0.8]\\n    else if (ndvi<0.05) image = [0.93,0.91,0.71]\\n    else if (ndvi<0.075) image = [0.87,0.85,0.61]\\n    else if (ndvi<0.1) image = [0.8,0.78,0.51]\\n    else if (ndvi<0.125) image = [0.74,0.72,0.42]\\n    else if (ndvi<0.15) image = [0.69,0.76,0.38]\\n    else if (ndvi<0.175) image = [0.64,0.8,0.35]\\n    else if (ndvi<0.2) image = [0.57,0.75,0.32]\\n    else if (ndvi<0.25) image = [0.5,0.7,0.28]\\n    else if (ndvi<0.3) image = [0.44,0.64,0.25]\\n    else if (ndvi<0.35) image = [0.38,0.59,0.21]\\n    else if (ndvi<0.4) image = [0.31,0.54,0.18]\\n    else if (ndvi<0.45) image = [0.25,0.49,0.14]\\n    else if (ndvi<0.5) image = [0.19,0.43,0.11]\\n    else if (ndvi<0.55) image = [0.13,0.38,0.07]\\n    else if (ndvi<0.6) image = [0.06,0.33,0.04]\\n    else  image = [0,0.27,0]\\n    return {\\n      default: [ ndvi ],\\n      ndvi_image: image\\n  }\\n}\"\n}","mode":"PROCESS"},{"name":"All S2L1C raw bands, original data (no normalization)","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              -94.047991,\n              41.793072\n            ],\n            [\n              -94.048033,\n              41.805773\n            ],\n            [\n              -94.067388,\n              41.805901\n            ],\n            [\n              -94.067345,\n              41.796719\n            ],\n            [\n              -94.062238,\n              41.79144\n            ],\n            [\n              -94.050479,\n              41.791376\n            ],\n            [\n              -94.050394,\n              41.793072\n            ],\n            [\n              -94.047991,\n              41.793072\n            ]\n          ]\n        ]\n      }\n    },\n    \"data\": [\n      {\n        \"type\": \"S2L1C\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-10-01T00:00:00Z\",\n            \"to\": \"2018-12-20T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 514.206,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [{\\n      bands: [\\\"B01\\\", \\\"B02\\\", \\\"B03\\\", \\\"B04\\\", \\\"B05\\\", \\\"B06\\\", \\\"B07\\\", \\\"B08\\\", \\\"B8A\\\", \\\"B09\\\", \\\"B10\\\", \\\"B11\\\", \\\"B12\\\"],\\n      units: \\\"DN\\\"\\n    }],\\n    output: {\\n      id: \\\"default\\\",\\n      bands: 13,\\n      sampleType: SampleType.UINT16\\n    }\\n  }\\n}\\nfunction evaluatePixel(sample) {\\n    return [ sample.B01, sample.B02, sample.B03, sample.B04, sample.B05, sample.B06, sample.B07, sample.B08, sample.B8A, sample.B09, sample.B10, sample.B11, sample.B12]\\n}\"\n}","mode":"PROCESS"}]
