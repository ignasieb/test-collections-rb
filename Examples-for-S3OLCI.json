[{"name":"True Color","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        8.333299,\n        41.3149,\n        9.7009,\n        43.0568\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S3OLCI\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-04-04T00:00:00Z\",\n            \"to\": \"2020-04-05T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"format\": {\n          \"type\": \"image/png\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"B08\\\", \\\"B06\\\", \\\"B04\\\"],\\n    output: { \\n      bands: 3,\\n      sampleType: \\\"AUTO\\\" // default value - scales the output values from [0,1] to [0,255].\\n    }\\n  }\\n}\\nfunction evaluatePixel(sample) {\\n  return [2.5 * sample.B08, 2.5 * sample.B06, 2.5 * sample.B04]\\n}\"\n}","mode":"PROCESS"},{"name":"True Color, multi-band GeoTiff","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        8.333299,\n        41.3149,\n        9.7009,\n        43.0568\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S3OLCI\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-04-04T00:00:00Z\",\n            \"to\": \"2020-04-05T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [{\\n      bands: [\\\"B04\\\", \\\"B06\\\", \\\"B08\\\"],\\n      units: \\\"REFLECTANCE\\\" // default value\\n    }],\\n    output: { \\n      bands: 3,\\n      sampleType: \\\"UINT16\\\"\\n    }\\n  }\\n}\\nfunction evaluatePixel(sample) {\\n  // Return the data multiplied by 10000 as integers to save processing units. To obtain reflectance values, simply divide the result's pixel values by 10000.\\n  return [Math.round(10000 * sample.B08), Math.round(10000 * sample.B06), Math.round(10000 * sample.B04)]\\n}\"\n}","mode":"PROCESS"},{"name":"True color and metadata (multi-part response GeoTIFF and json)","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        8.333299,\n        41.3149,\n        9.7009,\n        43.0568\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S3OLCI\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-04-04T00:00:00Z\",\n            \"to\": \"2020-04-05T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      },\n      {\n        \"identifier\": \"userdata\",\n        \"format\": {\n          \"type\": \"application/json\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [{\\n      bands: [\\\"B04\\\", \\\"B06\\\", \\\"B08\\\"],\\n      units: \\\"REFLECTANCE\\\"\\n    }],\\n    mosaicking: Mosaicking.SIMPLE,\\n    output: { \\n      id:\\\"default\\\",\\n      bands: 3,\\n      sampleType: \\\"INT16\\\"\\n     }\\n  }\\n}\\nfunction updateOutputMetadata(scenes, inputMetadata, outputMetadata) {\\n  outputMetadata.userData = { \\\"metadata\\\":  JSON.stringify(scenes) }\\n}\\nfunction evaluatePixel(samples) {\\n  // Return the bands multiplied by 10000 as integers to save processing units. To obtain reflectance values, simply divide the resulting pixel values by 10000.\\n  return [Math.round(10000 * samples.B08), Math.round(10000 * samples.B06), Math.round(10000 * samples.B04)]\\n}\"\n}","mode":"PROCESS"},{"name":"OTCI as jpeg image with bounds given as polygon","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              8.802795,\n              42.494377\n            ],\n            [\n              8.695678,\n              42.37072\n            ],\n            [\n              8.789062,\n              42.238685\n            ],\n            [\n              8.605041,\n              42.206142\n            ],\n            [\n              8.703918,\n              42.153223\n            ],\n            [\n              8.835754,\n              41.97991\n            ],\n            [\n              8.813781,\n              41.797935\n            ],\n            [\n              8.920898,\n              41.777456\n            ],\n            [\n              8.940124,\n              41.683168\n            ],\n            [\n              9.047241,\n              41.522973\n            ],\n            [\n              9.357604,\n              41.707779\n            ],\n            [\n              9.330139,\n              42.067645\n            ],\n            [\n              9.483947,\n              42.261049\n            ],\n            [\n              9.470214,\n              42.514626\n            ],\n            [\n              9.338378,\n              42.623854\n            ],\n            [\n              9.190063,\n              42.684454\n            ],\n            [\n              8.802795,\n              42.494377\n            ]\n          ]\n        ]\n      }\n    },\n    \"data\": [\n      {\n        \"type\": \"S3OLCI\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-04-04T00:00:00Z\",\n            \"to\": \"2020-04-05T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/jpeg\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [{\\n      bands:[\\\"B10\\\", \\\"B11\\\", \\\"B12\\\"],\\n    }],\\n    output: {\\n      id: \\\"default\\\",\\n      bands: 3,\\n      sampleType: \\\"AUTO\\\"\\n    }\\n  }\\n}\\n// Create a new visualiser to represent data\\nvar cm=new ColorMapVisualizer([\\n  [0,[0, 0, 0.5]],\\n  [1,[0, 0.3, 0.8]],\\n  [1.8,[1, 0.2, 0.2]],\\n  [2.5,[1, 0.9, 0]],\\n  [4,[0, 0.8, 0.1]],\\n  [4.5,[0, 0.6,0.2]],\\n  [5,[1, 1, 1]]\\n  ]);\\nfunction evaluatePixel(sample) {\\n    let OTCI = (sample.B12 - sample.B11) / (sample.B11 - sample.B10);\\n    return cm.process(OTCI);\\n}\\n\"\n}","mode":"PROCESS"},{"name":"OTCI image and value (multi-part response png and GeoTIFF containing floats)","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              8.802795,\n              42.494377\n            ],\n            [\n              8.695678,\n              42.37072\n            ],\n            [\n              8.789062,\n              42.238685\n            ],\n            [\n              8.605041,\n              42.206142\n            ],\n            [\n              8.703918,\n              42.153223\n            ],\n            [\n              8.835754,\n              41.97991\n            ],\n            [\n              8.813781,\n              41.797935\n            ],\n            [\n              8.920898,\n              41.777456\n            ],\n            [\n              8.940124,\n              41.683168\n            ],\n            [\n              9.047241,\n              41.522973\n            ],\n            [\n              9.357604,\n              41.707779\n            ],\n            [\n              9.330139,\n              42.067645\n            ],\n            [\n              9.483947,\n              42.261049\n            ],\n            [\n              9.470214,\n              42.514626\n            ],\n            [\n              9.338378,\n              42.623854\n            ],\n            [\n              9.190063,\n              42.684454\n            ],\n            [\n              8.802795,\n              42.494377\n            ]\n          ]\n        ]\n      }\n    },\n    \"data\": [\n      {\n        \"type\": \"S3OLCI\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-04-04T00:00:00Z\",\n            \"to\": \"2020-04-05T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"otci_image\",\n        \"format\": {\n          \"type\": \"image/png\"\n        }\n      },\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [{\\n      bands:[\\\"B10\\\", \\\"B11\\\", \\\"B12\\\"],\\n    }],\\n    output: [{\\n      id: \\\"default\\\",\\n      bands: 1,\\n      sampleType: \\\"FLOAT32\\\"\\n     },\\n     {\\n      id: \\\"otci_image\\\",\\n      bands: 3,\\n      sampleType: \\\"AUTO\\\"\\n     }\\n    ]\\n  }\\n}\\n// Create a new visualiser to represent data\\nvar cm=new ColorMapVisualizer([\\n  [0,[0, 0, 0.5]],\\n  [1,[0, 0.3, 0.8]],\\n  [1.8,[1, 0.2, 0.2]],\\n  [2.5,[1, 0.9, 0]],\\n  [4,[0, 0.8, 0.1]],\\n  [4.5,[0, 0.6,0.2]],\\n  [5,[1, 1, 1]]\\n  ]);\\nfunction evaluatePixel(sample) {\\n    let OTCI = (sample.B12 - sample.B11) / (sample.B11 - sample.B10);\\n    return {\\n      default: [ OTCI ],\\n      otci_image: cm.process(OTCI)\\n    }\\n}\"\n}","mode":"PROCESS"}]
