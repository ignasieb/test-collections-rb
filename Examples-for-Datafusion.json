[{"name":"Pan-sharpen Landsat-8 with Sentinel-2","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        2.142162,\n        41.377967,\n        2.208423,\n        41.407844\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"L8L1C\",\n        \"id\": \"ls8\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-05-21T00:00:00Z\",\n            \"to\": \"2020-05-22T00:00:00Z\"\n          }\n        }\n      },\n      {\n        \"type\": \"S2L2A\",\n        \"id\": \"l2a\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-05-22T00:00:00Z\",\n            \"to\": \"2020-05-23T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 1024,\n    \"height\": 1024,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/jpeg\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [{\\n        datasource: \\\"ls8\\\",\\n        bands: [\\\"B02\\\", \\\"B03\\\", \\\"B04\\\", \\\"B05\\\", \\\"B08\\\"]\\n      },\\n      {\\n        datasource: \\\"l2a\\\",\\n        bands: [\\\"B02\\\", \\\"B03\\\", \\\"B04\\\", \\\"B08\\\", \\\"B11\\\"]\\n      }\\n    ],\\n    output: [{\\n      bands: 3\\n    }]\\n  }\\n}\\nlet minVal = 0.0\\nlet maxVal = 0.4\\nlet viz = new DefaultVisualizer(minVal, maxVal)\\nfunction evaluatePixel(samples, inputData, inputMetadata, customData, outputMetadata) {\\n  var sample = samples.ls8[0]\\n  var sample2 = samples.l2a[0]\\n  // Use weighted arithmetic average of S2.B02 - S2.B04 for pan-sharpening\\n  let sudoPanW3 = (sample.B04 + sample.B03 + sample.B02) / 3\\n  let s2PanR3 = (sample2.B04 + sample2.B03 + sample2.B02) / 3\\n  let s2ratioWR3 = s2PanR3 / sudoPanW3\\n  let val = [sample.B04 * s2ratioWR3, sample.B03 * s2ratioWR3, sample.B02 * s2ratioWR3]\\n  return viz.processList(val)\\n}\"\n}","mode":"PROCESS"},{"name":"Pan-sharpen Sentinel-3 OLCI with Sentinel-2","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        7.388827,\n        53.537043,\n        8.35627,\n        53.901102\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S2L1C\",\n        \"id\": \"s2l1c\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-06-01T00:00:00Z\",\n            \"to\": \"2020-06-01T23:59:00Z\"\n          }\n        }\n      },\n      {\n        \"type\": \"S3OLCI\",\n        \"id\": \"s3olci\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-06-01T00:00:00Z\",\n            \"to\": \"2020-06-01T23:59:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 1024,\n    \"height\": 1024,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/jpeg\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [{\\n        datasource: \\\"s2l1c\\\",\\n        bands: [\\\"B02\\\", \\\"B03\\\", \\\"B04\\\"]\\n      },\\n      {\\n        datasource: \\\"s3olci\\\",\\n        bands: [\\\"B04\\\", \\\"B06\\\", \\\"B08\\\"]\\n      }\\n    ],\\n    output: [{\\n      bands: 3\\n    }]\\n  }\\n}\\nfunction evaluatePixel(samples, inputData, inputMetadata, customData, outputMetadata) {\\n  let value = [0, 0, 0]\\n  let amount_s2 = 0.5\\n  let gain = 3.00\\n  if (samples.s3olci[0]) {\\n    value = [(samples.s3olci[0].B08 * (1 - amount_s2) + samples.s2l1c[0].B04 * amount_s2) * gain,\\n      (samples.s3olci[0].B06 * (1 - amount_s2) + samples.s2l1c[0].B03 * amount_s2) * gain,\\n      (samples.s3olci[0].B04 * (1 - amount_s2) + samples.s2l1c[0].B02 * amount_s2) * gain\\n    ]\\n  }\\n  return value\\n}\"\n}","mode":"PROCESS"},{"name":"Replace clouds in Sentinel-2 images with Sentinel-1 data","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        33.3219,\n        44.4791,\n        33.8073,\n        44.7014\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S2L1C\",\n        \"id\": \"s2l1c\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-05-11T00:00:00Z\",\n            \"to\": \"2020-05-11T23:59:00Z\"\n          }\n        }\n      },\n      {\n        \"type\": \"S1GRD\",\n        \"id\": \"s1grd\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-05-11T00:00:00Z\",\n            \"to\": \"2020-05-11T23:59:00Z\"\n          }\n        },\n        \"processing\": {\n          \"orthorectify\": \"true\",\n          \"backCoeff\": \"SIGMA0_ELLIPSOID\"\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 1024,\n    \"height\": 1024,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/jpeg\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"// VERSION=3\\nfunction setup() {\\n  return {\\n    input: [{\\n        datasource: \\\"s2l1c\\\",\\n        bands: [\\\"B02\\\", \\\"B03\\\", \\\"B04\\\", \\\"CLM\\\", \\\"CLP\\\"]\\n      },\\n      {\\n        datasource: \\\"s1grd\\\",\\n        bands: [\\\"VV\\\", \\\"VH\\\"]\\n      }\\n    ],\\n    output: [{\\n      bands: 3\\n    }]\\n  }\\n}\\nfunction evaluatePixel(samples, inputData, inputMetadata, customData, outputMetadata) {\\n  var S2L1C = samples.s2l1c[0]\\n  var S1 = samples.s1grd[0]\\n  let WAT = 25 // Water Threshold for SAR\\n  let CLP = S2L1C.CLP / 2.55 // Cloud Propability\\n  let CLPT = 70 // Cloud Propabilty Threshold in percent\\n  if ((CLP > CLPT && S1.VV / S1.VH <= WAT)) {\\n    return [S1.VV * 3.0, S1.VV * 1.1 + S1.VH * 8.75, S1.VH * 1.75]\\n  }\\n  if ((CLP > CLPT && S1.VV / S1.VH > WAT)) {\\n    return [S1.VV * 1, S1.VV * 8, 0.5 + S1.VV * 3 + S1.VH * 2000]\\n  }\\n  let val = [3 * S2L1C.B04, 3 * S2L1C.B03, 3 * S2L1C.B02]\\n  return val\\n}\"\n}","mode":"PROCESS"},{"name":"NDVI with Sentinel-1 and Sentinel-2","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        -100.9204,\n        37.5718,\n        -100.4865,\n        37.864\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S1GRD\",\n        \"id\": \"s1\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2019-04-26T00:00:00Z\",\n            \"to\": \"2019-04-26T23:59:00Z\"\n          }\n        },\n        \"processing\": {\n          \"orthorectify\": \"true\",\n          \"backCoeff\": \"SIGMA0_ELLIPSOID\"\n        }\n      },\n      {\n        \"type\": \"S2L2A\",\n        \"id\": \"l2a\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2019-04-26T00:00:00Z\",\n            \"to\": \"2019-04-26T23:59:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 1024,\n    \"height\": 1024,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/jpeg\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [{\\n        datasource: \\\"s1\\\",\\n        bands: [\\\"VV\\\", \\\"VH\\\"]\\n      },\\n      {\\n        datasource: \\\"l2a\\\",\\n        bands: [\\\"B02\\\", \\\"B03\\\", \\\"B08\\\", \\\"B04\\\", \\\"SCL\\\"]\\n      }\\n    ],\\n    output: [{\\n      bands: 3\\n    }]\\n  }\\n}\\nfunction toDb(linear) {\\n  // Convert the linear backscatter to DB (Filgueiras et al. (2019), eq. 3)\\n  return 10 * Math.LN10 * linear\\n}\\nfunction calc_s1_ndvi(sigmaVV, sigmaVH) {\\n  // Convert sigma0 to Decibels\\n  let vh_Db = toDb(sigmaVH)\\n  let vv_Db = toDb(sigmaVV)\\n  // Calculate NRPB (Filgueiras et al. (2019), eq. 4)\\n  let NRPB = (vh_Db - vv_Db) / (vh_Db + vv_Db)\\n  // Calculate NDVI_nc with approach A3 (Filgueiras et al. (2019), eq. 14)\\n  let NDVInc = 2.572 - 0.05047 * vh_Db + 0.176 * vv_Db + 3.422 * NRPB\\n  return NDVInc\\n}\\nfunction evaluatePixel(samples) {\\n  var s1 = samples.s1[0]\\n  var s2 = samples.l2a[0]\\n  // Create an NDVI visualiser\\n  var viz = new ColorMapVisualizer([\\n    [0.0, 0xa50026],\\n    [0.0, 0xd73027],\\n    [0.2, 0xf46d43],\\n    [0.3, 0xfdae61],\\n    [0.4, 0xfee08b],\\n    [0.5, 0xffffbf],\\n    [0.6, 0xd9ef8b],\\n    [0.7, 0xa6d96a],\\n    [0.8, 0x66bd63],\\n    [0.9, 0x1a9850],\\n    [1.0, 0x006837]\\n  ])\\n  // Calculate S2 NDVI\\n  let ndvi = index(s2.B08, s2.B04)\\n  // Calculate S1 NDVI\\n  let s1_ndvi = calc_s1_ndvi(s1.VV, s1.VH)\\n  // Use the S2-L2A classification to identify clouds\\n  if ([7, 8, 9, 10].includes(s2.SCL)) {\\n    // If clouds are present use S1 NDVI\\n    return viz.process(s1_ndvi)\\n  } else {\\n    // Otherwise use s2 NDVI\\n    return viz.process(ndvi)\\n  }\\n}\"\n}","mode":"PROCESS"},{"name":"Ship detection with Sentinel-1 and Sentinel-2","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        119.60987,\n        32.176774,\n        119.914741,\n        32.364013\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S1GRD\",\n        \"id\": \"s1grd\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-05-23T00:00:00Z\",\n            \"to\": \"2020-05-23T23:59:00Z\"\n          }\n        },\n        \"processing\": {\n          \"orthorectify\": \"true\",\n          \"backCoeff\": \"SIGMA0_ELLIPSOID\"\n        }\n      },\n      {\n        \"type\": \"S2L2A\",\n        \"id\": \"s2l1c\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-05-23T00:00:00Z\",\n            \"to\": \"2020-05-23T23:59:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 1024,\n    \"height\": 1024,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/jpeg\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [{\\n        datasource: \\\"s2l1c\\\",\\n        bands: [\\\"B02\\\", \\\"B03\\\", \\\"B04\\\", \\\"B08\\\"]\\n      },\\n      {\\n        datasource: \\\"s1grd\\\",\\n        bands: [\\\"VV\\\", \\\"VH\\\"]\\n      }\\n    ],\\n    output: [{\\n      bands: 3\\n    }]\\n  }\\n}\\nfunction evaluatePixel(samples, inputData, inputMetadata, customData, outputMetadata) {\\n  var S2L1C = samples.s2l1c[0]\\n  var S1 = samples.s1grd[0]\\n  let ndwi = (S2L1C.B03 - S2L1C.B08) / (S2L1C.B03 + S2L1C.B08)\\n  if ((ndwi > 0.1) && ((S1.VV > 0.3) || (S1.VH > 0.3))) {\\n    return [1, 1, 1]\\n  } else if (ndwi > 0.1) {\\n    return [(4 * S2L1C.B04) - 0.2, (4 * S2L1C.B03) - 0.2, (5 * S2L1C.B02) - 0.2]\\n  }\\n  let val = [(4 * S2L1C.B04) - 0.2, (4 * S2L1C.B03) - 0.2, (4 * S2L1C.B02) - 0.2]\\n  return val\\n}\"\n}","mode":"PROCESS"},{"name":"Built up areas detection with Sentinel-1 and Sentinel-2","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        12.280998,\n        45.402065,\n        12.432746,\n        45.473614\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S2L1C\",\n        \"id\": \"s2l1c\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2019-12-10T00:00:00Z\",\n            \"to\": \"2019-12-10T23:59:00Z\"\n          }\n        }\n      },\n      {\n        \"type\": \"S1GRD\",\n        \"id\": \"s1grd\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2019-12-10T00:00:00Z\",\n            \"to\": \"2019-12-10T23:59:00Z\"\n          }\n        },\n        \"processing\": {\n          \"orthorectify\": \"true\",\n          \"backCoeff\": \"SIGMA0_ELLIPSOID\"\n        }\n      },\n      {\n        \"type\": \"S2L2A\",\n        \"id\": \"s2l2a\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2019-12-10T00:00:00Z\",\n            \"to\": \"2019-12-10T23:59:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 1024,\n    \"height\": 1024,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/jpeg\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [{\\n        datasource: \\\"s2l1c\\\",\\n        bands: [\\\"B02\\\", \\\"B03\\\", \\\"B04\\\", \\\"B08\\\", \\\"B11\\\"]\\n      },\\n      {\\n        datasource: \\\"s1grd\\\",\\n        bands: [\\\"VV\\\", \\\"VH\\\"],\\n        orthorectify: \\\"TRUE\\\"\\n      },\\n      {\\n        datasource: \\\"s2l2a\\\",\\n        bands: [\\\"B02\\\", \\\"B03\\\", \\\"B04\\\"]\\n      }\\n    ],\\n    output: [{\\n      bands: 3\\n    }]\\n  }\\n}\\nfunction evaluatePixel(samples) {\\n  var S2L1C = samples.s2l1c[0]\\n  var S2L2A = samples.s2l2a[0]\\n  var S1 = samples.s1grd[0]\\n  let ndvi = (S2L1C.B08 - S2L1C.B04) / (S2L1C.B08 + S2L1C.B04)\\n  let ndmi = (S2L1C.B08 - S2L1C.B11) / (S2L1C.B08 + S2L1C.B11)\\n  if (ndvi > 0.5) {\\n    return [3 * S2L2A.B04, 3 * S2L2A.B03, 3 * S2L2A.B02]\\n  }\\n  if (ndmi > 0) {\\n    return [3 * S2L2A.B04, 3 * S2L2A.B03, 4 * S2L2A.B02]\\n  }\\n  if ((S1.VH > 0.2) || (S1.VV > 0.2)) {\\n    return [S1.VH * 5.5, S1.VV, S1.VH * 8]\\n  }\\n  return [3 * S2L1C.B04 - 0.2, 3 * S2L1C.B03 - 0.2, 3 * S2L1C.B02 - 0.2]\\n}\"\n}","mode":"PROCESS"},{"name":"Fire monitoring with Sentinel-1 and Sentinel-2","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        -59.757386,\n        -19.919131,\n        -58.727417,\n        -19.062118\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S2L2A\",\n        \"id\": \"l2a_t1\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2019-09-06T00:00:00Z\",\n            \"to\": \"2019-09-08T23:59:59Z\"\n          }\n        }\n      },\n      {\n        \"type\": \"S1GRD\",\n        \"id\": \"s1_t1\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2019-09-06T00:00:00Z\",\n            \"to\": \"2019-09-08T23:59:59Z\"\n          }\n        }\n      },\n      {\n        \"type\": \"S1GRD\",\n        \"id\": \"s1_t2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2019-09-11T00:00:00Z\",\n            \"to\": \"2019-09-13T23:59:59Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 1024,\n    \"height\": 1024,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/jpeg\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\n// Multitemporal forest fire progression monitoring script utilizing a) Sentinel-2 data from 7 September 2019 for the visualization of burned areas\\n// and b) Sentinel-1 SAR data to monitor forest fire progression in overcast conditions on 12 September 2019.\\nfunction setup() {\\n  return {\\n    input: [{\\n        datasource: \\\"s1_t1\\\",\\n        bands: [\\\"VH\\\"]\\n      }, // S1 data from 7 September 2019 (t1)\\n      {\\n        datasource: \\\"s1_t2\\\",\\n        bands: [\\\"VV\\\", \\\"VH\\\"]\\n      }, // S1 data from 12 September 2019 (t2)\\n      {\\n        datasource: \\\"l2a_t1\\\",\\n        bands: [\\\"B03\\\", \\\"B04\\\", \\\"B08\\\", \\\"B11\\\", \\\"B12\\\"]\\n      }\\n    ], // S2 data from 7 September 2019 (t1)\\n    output: [{\\n      bands: 3\\n    }]\\n  }\\n}\\nfunction evaluatePixel(samples, inputData, inputMetadata, customData, outputMetadata) {\\n  var s1_1 = samples.s1_t1[0] //Assigns S1 data from t1\\n  var s1_2 = samples.s1_t2[0] //Assigns S1 data from t2\\n  var s2_1 = samples.l2a_t1[0] //Assigns S2 data from t1\\n  // Calculate indices with S2 data from t1 for Burned Area visualization by Monja Sebela\\n  var NDWI = index(s2_1.B03, s2_1.B08)\\n  var NDVI = index(s2_1.B08, s2_1.B04)\\n  var INDEX = ((s2_1.B11 - s2_1.B12) / (s2_1.B11 + s2_1.B12)) + (s2_1.B08)\\n  // Calculate difference in S1 VH backscatter between second (t2) and first scene (t1) (Belenguer-Plomer et al. 2019)\\n  var VH_diff = (s1_2.VH - s1_1.VH)\\n  // Set classification threshholds\\n  var thr_VH = 0.03\\n  var thr_VH_diff = -0.015\\n  var thr_VV = 0.2\\n  if ((NDWI > 0.15) || (NDVI > 0.35) || (INDEX > 0.2)) { // If non-burned areas in S2 image from t1\\n    if ((s1_2.VH < thr_VH) & (VH_diff < thr_VH_diff)) { // are classified as burned in S1 image from t2 via threshholds for VH backscatter and the calculated difference layer\\n      return [1, 0, 0] // Return red color\\n    } else {\\n      return [2.5 * s2_1.B12, 2.5 * s2_1.B08, 2.5 * s2_1.B04] // Else return SWIR composite\\n    }\\n  } else {\\n    if (s1_2.VV < thr_VV) { // Else, if already burnt area is also burned in S1 image from t2\\n      return [0.9, 0.9, 0.7] // Return beige color\\n    } else {\\n      return [0, 0, 1] // Else return blue for areas that are no longer burned in S1 image from t2\\n    }\\n  }\\n}\"\n}","mode":"PROCESS"},{"name":"Monitoring low pressure clouds with Sentinel-3 OLCI and Sentinel-5P","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        -154.82,\n        13.56,\n        -135.66,\n        21.96\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S3OLCI\",\n        \"id\": \"s3olci\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-07-24T00:00:00Z\",\n            \"to\": \"2020-07-24T23:59:59Z\"\n          }\n        }\n      },\n      {\n        \"type\": \"S5PL2\",\n        \"id\": \"s5pl2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-07-24T00:00:00Z\",\n            \"to\": \"2020-07-24T23:59:59Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 1024,\n    \"height\": 1024,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/jpeg\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [{\\n        datasource: \\\"s3olci\\\",\\n        bands: [\\\"B04\\\", \\\"B06\\\", \\\"B08\\\"]\\n      },\\n      {\\n        datasource: \\\"s5pl2\\\",\\n        bands: [\\\"CLOUD_TOP_PRESSURE\\\"]\\n      }\\n    ],\\n    output: [{\\n      bands: 3\\n    }]\\n  }\\n}\\nfunction evaluatePixel(samples, inputData, inputMetadata, customData, outputMetadata) {\\n  var S5 = samples.s5pl2[0]\\n  var S3 = samples.s3olci[0]\\n  var CLOUD_TOP_PRESSURE = S5.CLOUD_TOP_PRESSURE\\n  var minVal = 10000.0\\n  var maxVal = 110000.0\\n  var diff = maxVal - minVal\\n  var limits = [minVal, minVal + 0.125 * diff, minVal + 0.375 * diff, minVal + 0.625 * diff, minVal + 0.875 * diff, maxVal]\\n  var colors = [\\n    [0, 0, 0.5],\\n    [0, 0, 1],\\n    [0, 1, 1],\\n    [1, 1, 0],\\n    [1, 0, 0],\\n    [0.5, 0, 0]\\n  ]\\n  if (CLOUD_TOP_PRESSURE > 0) {\\n    return colorBlend(CLOUD_TOP_PRESSURE, limits, colors)\\n  }\\n  return [S3.B08 * 3, S3.B06 * 3, S3.B04 * 3.5]\\n}\"\n}","mode":"PROCESS"}]
