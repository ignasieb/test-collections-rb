[{"name":"False Color","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        8.558382,\n        41.359678,\n        9.579525,\n        43.055688\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S3SLSTR\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-06-20T00:00:00Z\",\n            \"to\": \"2020-06-20T23:59:59Z\"\n          },\n          \"orbitDirection\": \"DESCENDING\"\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"format\": {\n          \"type\": \"image/png\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"S3\\\", \\\"S2\\\", \\\"S1\\\"],\\n    output: { \\n      bands: 3,\\n      sampleType: \\\"AUTO\\\"\\n    }\\n  }\\n}\\nfunction evaluatePixel(sample) {\\n  return [2 * sample.S3, 2 * sample.S2, 2 * sample.S1]\\n}\"\n}","mode":"PROCESS"},{"name":"Thermal IR fire emission band, gradient visualizer (K)","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        -120.141001,\n        37.5282,\n        -119.4131,\n        37.8716\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S3SLSTR\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-08-06T00:00:00Z\",\n            \"to\": \"2018-08-06T23:59:59Z\"\n          },\n          \"orbitDirection\": \"DESCENDING\"\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"format\": {\n          \"type\": \"image/png\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"F1\\\"],\\n    output: { \\n      bands: 3,\\n    }\\n  }\\n}\\n// Create a Red gradient visualiser from 274-450 K\\nvar viz = ColorGradientVisualizer.createRedTemperature(274,450)\\nfunction evaluatePixel(sample) {\\n  return viz.process(sample.F1);\\n}\"\n}","mode":"PROCESS"},{"name":"False Color and metadata (multi-part GeoTIFF and json)","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        8.558382,\n        41.359678,\n        9.579525,\n        43.055688\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S3SLSTR\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2020-06-20T00:00:00Z\",\n            \"to\": \"2020-06-20T23:59:59Z\"\n          },\n          \"orbitDirection\": \"DESCENDING\"\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      },\n      {\n        \"identifier\": \"userdata\",\n        \"format\": {\n          \"type\": \"application/json\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"S3\\\", \\\"S2\\\", \\\"S1\\\"],\\n    output: { \\n      id:\\\"default\\\",\\n      bands: 3,\\n      sampleType: \\\"INT16\\\"\\n     },\\n    mosaicking: \\\"TILE\\\"\\n  }\\n}\\nfunction updateOutputMetadata(scenes, inputMetadata, outputMetadata) {\\n  outputMetadata.userData = { \\\"metadata\\\":  JSON.stringify(scenes) }\\n}\\nfunction evaluatePixel(sample) {\\n  return [sample[0].S3 * 10000, sample[0].S2 * 10000, sample[0].S1 * 10000] //the values are multiplied by 10000 because output sampleType is UINT16\\n}\"\n}","mode":"PROCESS"}]
