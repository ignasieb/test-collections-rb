[{"name":"Carbon Monoxide, CO (RGB visualization and transparency with dataMask)","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        13,\n        45,\n        14.999999,\n        47\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S5PL2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-12-28T00:00:00Z\",\n            \"to\": \"2018-12-31T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/jpeg\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"CO\\\", \\\"dataMask\\\"],\\n    output: { bands:  4 }\\n  }\\n}\\nconst minVal = 0.0\\nconst maxVal = 0.1\\nconst diff = maxVal - minVal\\nconst rainbowColors = [\\n    [minVal, [0, 0, 0.5]],\\n    [minVal + 0.125 * diff, [0, 0, 1]],\\n    [minVal + 0.375 * diff, [0, 1, 1]],\\n    [minVal + 0.625 * diff, [1, 1, 0]],\\n    [minVal + 0.875 * diff, [1, 0, 0]],\\n    [maxVal, [0.5, 0, 0]]\\n]\\nconst viz = new ColorRampVisualizer(rainbowColors)\\nfunction evaluatePixel(sample) {\\n    var rgba= viz.process(sample.CO)\\n    rgba.push(sample.dataMask)\\n    return rgba\\n}\"\n}","mode":"PROCESS"},{"name":"Nitrogen Dioxide, NO2 (NRTI timeliness, RGB visualization and transparency with dataMask)","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        13,\n        45,\n        14.999999,\n        47\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S5PL2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-12-30T00:00:00Z\",\n            \"to\": \"2018-12-31T00:00:00Z\"\n          },\n          \"timeliness\": \"NRTI\"\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/jpeg\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"NO2\\\", \\\"dataMask\\\"],\\n    output: { bands:  4 }\\n  }\\n}\\nconst minVal = 0.0\\nconst maxVal = 0.0001\\nconst diff = maxVal - minVal\\nconst rainbowColors = [\\n    [minVal, [0, 0, 0.5]],\\n    [minVal + 0.125 * diff, [0, 0, 1]],\\n    [minVal + 0.375 * diff, [0, 1, 1]],\\n    [minVal + 0.625 * diff, [1, 1, 0]],\\n    [minVal + 0.875 * diff, [1, 0, 0]],\\n    [maxVal, [0.5, 0, 0]]\\n]\\nconst viz = new ColorRampVisualizer(rainbowColors)\\nfunction evaluatePixel(sample) {\\n    var rgba= viz.process(sample.NO2)\\n    rgba.push(sample.dataMask)\\n    return rgba\\n}\"\n}","mode":"PROCESS"},{"name":"Formaldehyde, HCHO (float32 format, specific value for no data, GeoTIFF)","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        13,\n        45,\n        14.999999,\n        47\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S5PL2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-12-30T00:00:00Z\",\n            \"to\": \"2018-12-31T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"HCHO\\\", \\\"dataMask\\\"],\\n    output: { bands:  1 , sampleType: \\\"FLOAT32\\\"}\\n  }\\n}\\nfunction evaluatePixel(sample) {\\n    if (sample.dataMask == 1){\\n        return [sample.HCHO]\\n    } else {\\n        return [-9999]\\n    }\\n}\"\n}","mode":"PROCESS"},{"name":"Ozone, O3 (RPRO timeliness, streched values and dataMask)","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        13,\n        45,\n        14.999999,\n        47\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S5PL2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2019-04-22T00:00:00Z\",\n            \"to\": \"2019-04-23T00:00:00Z\"\n          },\n          \"timeliness\": \"RPRO\"\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"O3\\\", \\\"dataMask\\\"],\\n    output: { bands: 2 }\\n  }\\n}\\nfunction evaluatePixel(sample, scene) {\\n  var maxVal = 0.36; \\n  return [sample.O3/maxVal, sample.dataMask]\\n}\"\n}","mode":"PROCESS"},{"name":"Sulfur Dioxide, SO2 (minQa=20 applied, streched values)","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        13,\n        45,\n        14.999999,\n        47\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S5PL2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-12-30T00:00:00Z\",\n            \"to\": \"2018-12-31T00:00:00Z\"\n          }\n        },\n        \"processing\": {\n          \"minQa\": 20\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"SO2\\\", \\\"dataMask\\\"],\\n    output: { bands: 2 }\\n  }\\n}\\nfunction evaluatePixel(sample, scene) {\\n  var maxVal = 0.01; \\n  return [sample.SO2/maxVal, sample.dataMask]\\n}\"\n}","mode":"PROCESS"},{"name":"Methane, CH4","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        10,\n        20,\n        14.999999,\n        25\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S5PL2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-12-28T00:00:00Z\",\n            \"to\": \"2018-12-31T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"CH4\\\", \\\"dataMask\\\"],\\n    output: { bands:  4 }\\n  }\\n}\\nconst minVal = 1600.0\\nconst maxVal = 2000.0\\nconst diff = maxVal - minVal\\nconst rainbowColors = [\\n    [minVal, [0, 0, 0.5]],\\n    [minVal + 0.125 * diff, [0, 0, 1]],\\n    [minVal + 0.375 * diff, [0, 1, 1]],\\n    [minVal + 0.625 * diff, [1, 1, 0]],\\n    [minVal + 0.875 * diff, [1, 0, 0]],\\n    [maxVal, [0.5, 0, 0]]\\n]\\nconst viz = new ColorRampVisualizer(rainbowColors)\\nfunction evaluatePixel(sample) {\\n    var rgba = viz.process(sample.CH4)\\n    rgba.push(sample.dataMask)\\n    return rgba\\n}\"\n}","mode":"PROCESS"},{"name":"AER AI 340 and 380","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        13,\n        45,\n        14.999999,\n        47\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S5PL2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-12-28T00:00:00Z\",\n            \"to\": \"2018-12-31T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"AER_AI_340_380\\\", \\\"dataMask\\\"],\\n    output: { bands:  4 }\\n  }\\n}\\nconst minVal = -1.0\\nconst maxVal = 5.0\\nconst diff = maxVal - minVal\\nconst rainbowColors = [\\n    [minVal, [0, 0, 0.5]],\\n    [minVal + 0.125 * diff, [0, 0, 1]],\\n    [minVal + 0.375 * diff, [0, 1, 1]],\\n    [minVal + 0.625 * diff, [1, 1, 0]],\\n    [minVal + 0.875 * diff, [1, 0, 0]],\\n    [maxVal, [0.5, 0, 0]]\\n]\\nconst viz = new ColorRampVisualizer(rainbowColors)\\nfunction evaluatePixel(sample) {\\n    var rgba = viz.process(sample.AER_AI_340_380)\\n    rgba.push(sample.dataMask)\\n    return rgba\\n}\"\n}","mode":"PROCESS"},{"name":"AER AI 354 and 388","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        13,\n        45,\n        14.999999,\n        47\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S5PL2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-12-28T00:00:00Z\",\n            \"to\": \"2018-12-31T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"AER_AI_354_388\\\", \\\"dataMask\\\"],\\n    output: { bands:  4 }\\n  }\\n}\\nconst minVal = -1.0\\nconst maxVal = 5.0\\nconst diff = maxVal - minVal\\nconst rainbowColors = [\\n    [minVal, [0, 0, 0.5]],\\n    [minVal + 0.125 * diff, [0, 0, 1]],\\n    [minVal + 0.375 * diff, [0, 1, 1]],\\n    [minVal + 0.625 * diff, [1, 1, 0]],\\n    [minVal + 0.875 * diff, [1, 0, 0]],\\n    [maxVal, [0.5, 0, 0]]\\n]\\nconst viz = new ColorRampVisualizer(rainbowColors)\\nfunction evaluatePixel(sample) {\\n    var rgba = viz.process(sample.AER_AI_354_388)\\n    rgba.push(sample.dataMask)\\n    return rgba\\n}\"\n}","mode":"PROCESS"},{"name":"Cloud base height","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        13,\n        45,\n        14.999999,\n        47\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S5PL2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-12-28T00:00:00Z\",\n            \"to\": \"2018-12-31T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"CLOUD_BASE_HEIGHT\\\", \\\"dataMask\\\"],\\n    output: { bands:  4 }\\n  }\\n}\\nconst minVal = 0\\nconst maxVal = 20000.0\\nconst diff = maxVal - minVal\\nconst rainbowColors = [\\n    [minVal, [0, 0, 0.5]],\\n    [minVal + 0.125 * diff, [0, 0, 1]],\\n    [minVal + 0.375 * diff, [0, 1, 1]],\\n    [minVal + 0.625 * diff, [1, 1, 0]],\\n    [minVal + 0.875 * diff, [1, 0, 0]],\\n    [maxVal, [0.5, 0, 0]]\\n]\\nconst viz = new ColorRampVisualizer(rainbowColors)\\nfunction evaluatePixel(sample) {\\n    var rgba = viz.process(sample.CLOUD_BASE_HEIGHT)\\n    rgba.push(sample.dataMask)\\n    return rgba\\n}\"\n}","mode":"PROCESS"},{"name":"Cloud base pressure","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        13,\n        45,\n        14.999999,\n        47\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S5PL2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-12-28T00:00:00Z\",\n            \"to\": \"2018-12-31T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"CLOUD_BASE_PRESSURE\\\", \\\"dataMask\\\"],\\n    output: { bands:  4 }\\n  }\\n}\\nconst minVal = 10000.0\\nconst maxVal = 110000.0\\nconst diff = maxVal - minVal\\nconst rainbowColors = [\\n    [minVal, [0, 0, 0.5]],\\n    [minVal + 0.125 * diff, [0, 0, 1]],\\n    [minVal + 0.375 * diff, [0, 1, 1]],\\n    [minVal + 0.625 * diff, [1, 1, 0]],\\n    [minVal + 0.875 * diff, [1, 0, 0]],\\n    [maxVal, [0.5, 0, 0]]\\n]\\nconst viz = new ColorRampVisualizer(rainbowColors)\\nfunction evaluatePixel(sample) {\\n    var rgba = viz.process(sample.CLOUD_BASE_PRESSURE)\\n    rgba.push(sample.dataMask)\\n    return rgba\\n}\"\n}","mode":"PROCESS"},{"name":"Effective radiometric cloud fraction","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        13,\n        45,\n        14.999999,\n        47\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S5PL2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-12-28T00:00:00Z\",\n            \"to\": \"2018-12-31T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"CLOUD_FRACTION\\\", \\\"dataMask\\\"],\\n    output: { bands:  4 }\\n  }\\n}\\nconst minVal = 0.0\\nconst maxVal = 1.0\\nconst diff = maxVal - minVal\\nconst rainbowColors = [\\n    [minVal, [0, 0, 0.5]],\\n    [minVal + 0.125 * diff, [0, 0, 1]],\\n    [minVal + 0.375 * diff, [0, 1, 1]],\\n    [minVal + 0.625 * diff, [1, 1, 0]],\\n    [minVal + 0.875 * diff, [1, 0, 0]],\\n    [maxVal, [0.5, 0, 0]]\\n]\\nconst viz = new ColorRampVisualizer(rainbowColors)\\nfunction evaluatePixel(sample) {\\n    var rgba = viz.process(sample.CLOUD_FRACTION)\\n    rgba.push(sample.dataMask)\\n    return rgba\\n}\"\n}","mode":"PROCESS"},{"name":"Cloud optical thickness","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        13,\n        45,\n        14.999999,\n        47\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S5PL2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-12-28T00:00:00Z\",\n            \"to\": \"2018-12-31T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"CLOUD_OPTICAL_THICKNESS\\\", \\\"dataMask\\\"],\\n    output: { bands:  4 }\\n  }\\n}\\nconst minVal = 0.0\\nconst maxVal = 250.0\\nconst diff = maxVal - minVal\\nconst rainbowColors = [\\n    [minVal, [0, 0, 0.5]],\\n    [minVal + 0.125 * diff, [0, 0, 1]],\\n    [minVal + 0.375 * diff, [0, 1, 1]],\\n    [minVal + 0.625 * diff, [1, 1, 0]],\\n    [minVal + 0.875 * diff, [1, 0, 0]],\\n    [maxVal, [0.5, 0, 0]]\\n]\\nconst viz = new ColorRampVisualizer(rainbowColors)\\nfunction evaluatePixel(sample) {\\n    var rgba = viz.process(sample.CLOUD_OPTICAL_THICKNESS)\\n    rgba.push(sample.dataMask)\\n    return rgba\\n}\"\n}","mode":"PROCESS"},{"name":"Cloud top height","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        13,\n        45,\n        14.999999,\n        47\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S5PL2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-12-28T00:00:00Z\",\n            \"to\": \"2018-12-31T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"CLOUD_TOP_HEIGHT\\\", \\\"dataMask\\\"],\\n    output: { bands:  4 }\\n  }\\n}\\nconst minVal = 0.0\\nconst maxVal = 20000.0\\nconst diff = maxVal - minVal\\nconst rainbowColors = [\\n    [minVal, [0, 0, 0.5]],\\n    [minVal + 0.125 * diff, [0, 0, 1]],\\n    [minVal + 0.375 * diff, [0, 1, 1]],\\n    [minVal + 0.625 * diff, [1, 1, 0]],\\n    [minVal + 0.875 * diff, [1, 0, 0]],\\n    [maxVal, [0.5, 0, 0]]\\n]\\nconst viz = new ColorRampVisualizer(rainbowColors)\\nfunction evaluatePixel(sample) {\\n    var rgba = viz.process(sample.CLOUD_TOP_HEIGHT)\\n    rgba.push(sample.dataMask)\\n    return rgba\\n}\"\n}","mode":"PROCESS"},{"name":"Cloud top pressure","request":"{\n  \"input\": {\n    \"bounds\": {\n      \"bbox\": [\n        13,\n        45,\n        14.999999,\n        47\n      ]\n    },\n    \"data\": [\n      {\n        \"type\": \"S5PL2\",\n        \"dataFilter\": {\n          \"timeRange\": {\n            \"from\": \"2018-12-28T00:00:00Z\",\n            \"to\": \"2018-12-31T00:00:00Z\"\n          }\n        }\n      }\n    ]\n  },\n  \"output\": {\n    \"width\": 512,\n    \"height\": 512,\n    \"responses\": [\n      {\n        \"identifier\": \"default\",\n        \"format\": {\n          \"type\": \"image/tiff\"\n        }\n      }\n    ]\n  },\n  \"evalscript\": \"//VERSION=3\\nfunction setup() {\\n  return {\\n    input: [\\\"CLOUD_TOP_PRESSURE\\\", \\\"dataMask\\\"],\\n    output: { bands:  4 }\\n  }\\n}\\nconst minVal = 10000.0\\nconst maxVal = 110000.0\\nconst diff = maxVal - minVal\\nconst rainbowColors = [\\n    [minVal, [0, 0, 0.5]],\\n    [minVal + 0.125 * diff, [0, 0, 1]],\\n    [minVal + 0.375 * diff, [0, 1, 1]],\\n    [minVal + 0.625 * diff, [1, 1, 0]],\\n    [minVal + 0.875 * diff, [1, 0, 0]],\\n    [maxVal, [0.5, 0, 0]]\\n]\\nconst viz = new ColorRampVisualizer(rainbowColors)\\nfunction evaluatePixel(sample) {\\n    var rgba = viz.process(sample.CLOUD_TOP_PRESSURE)\\n    rgba.push(sample.dataMask)\\n    return rgba\\n}\"\n}","mode":"PROCESS"}]
